{"version":3,"sources":["constants.js","fns.js","App.js","serviceWorker.js","index.js"],"names":["constants","ALLOCATION_TYPES","MANUAL","MIN_REGRET","MIN_TIME","CHART_LABELS","_CHART_LABELS","Object","defineProperty","roundDist","distribution","map","value","parseInt","fns","getConfidenceNumbers","jsonFile","variations","trafficAllocation","length","confidences","pValues","Array","fill","confidenceIntervals","Infinity","forEach","visitor","push","values","stats","statObject","pValue","confInterval","getCounts","visitorCounts","conversions","visitors","totalConversions","totalVisitors","counterfactualConversions","counterfactualRate","totalConversionRate","summaryObject","_","cloneDeep","variation","convert","x","fixedPercentage","computedPercentage","Number","isNaN","computeCounterfactualRate","computedConversions","computeCounterfactualConversions","getDistributions","sampleRate","arguments","undefined","initialPoints","distributions","index","visitorIndex","roundedDist","DistributionChart","getDistributionData","_this$props","_this","props","counterfactualEnabled","counts","position","series","name","concat","data","slice","animation","duration","conversionRateSeries","counterfactualRateSeries","color","lineWidth","marker","enabled","tooltip","split","type","yAxis","dashStyle","valueDecimals","valueSuffix","_this$props2","this","chartRef","policy","config","chart","credits","plotOptions","line","formatter","points","point","pointValue","y","suffix","includes","toFixed","title","text","xAxis","labels","min","max","area","stacking","opposite","style","react_default","a","createElement","className","ReactHighcharts_default","ref","Component","VariationCard","_this$props3","conversionCount","visitorCount","StatSigCard","formatPValue","_this2","_this$props4","classNames","SummaryCard","getVisitorCount","_this3$props","_this3","getConversionCount","_this3$props2","getPValue","_this3$props3","isBetterThanBaseline","baselineConversionRate","variationConversionRate","renderVariationCards","conversionTotal","visitorTotal","App_VariationCard","key","renderStatSigCards","App_StatSigCard","_this$props5","hideGraphs","border--left","flex","flex-align--center","flex--column","soft","minWidth","App","_this4","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentPosition","enabledCharts","interval","isRunning","marks","multiplier","getNextSignificantPoint","_this4$state","significantPoints","keys","filter","mark","getPreviousSignificantPoint","_this4$state2","toggleCounterfactual","setState","previousState","toggleSeries","chartRefs","current","visible","hide","show","handleKeyDown","event","keyCode","preventDefault","stopCounting","startCounting","toggleChart","target","setCurrentPosition","maxVisitors","toggleCharts","reset","isChartEnabled","chartType","setTimelineMarks","0","label","20000","startInterval","setInterval","_previousState","clearInterval","charts","window","uniform","minRegretDistributions","minRegret","minTimeDistributions","minTime","uniformDistributions","minRegretCounts","minTimeCounts","uniformCounts","minRegretConfidences","minTimeConfidences","uniformConfidences","Math","minRegretVariations","minTimeVariations","uniformVariations","minRegretRef","React","createRef","minTimeRef","uniformRef","document","addEventListener","push-double--right","checked","id","onChange","htmlFor","onClick","dist_default","size","es","dots","flex--row","flex-justify--center","flex--space","App_DistributionChart","App_SummaryCard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f90dd31.chunk.js","sourcesContent":["export const MANUAL = 'MANUAL';\nexport const MIN_REGRET = 'MIN_REGRET'; // Accelerated Impact\nexport const MIN_TIME = 'MIN_TIME'; // Accelerated Learning\n\nexport const ALLOCATION_TYPES = {\n  MANUAL,\n  MIN_REGRET,\n  MIN_TIME,\n}\n\nexport const CHART_LABELS = {\n  [MANUAL]: 'Standard A/B',\n  [MIN_REGRET]: 'Min Regret (Accelerated Impact)',\n  [MIN_TIME]: 'Min Time (Accelerated Learning)',\n}\n\nexport default {\n  ALLOCATION_TYPES,\n  CHART_LABELS,\n  MANUAL,\n  MIN_REGRET,\n  MIN_TIME,\n};\n","import _ from 'lodash';\n\nconst roundDist = (distribution) => {\n  return distribution.map((value) => {\n    return parseInt(value * 10000) / 100;\n  });\n};\n\nconst computeCounterfactualRate = (summaryObject, variations) => {\n  const fixedPercentage = 1 / variations;\n  let computedPercentage = 0;\n  let x;\n  for (x = 0; x < variations; x++) {\n    computedPercentage += (summaryObject.conversions[x] / summaryObject.visitors[x]) * fixedPercentage;\n  }\n  return Number.isNaN(computedPercentage) ? 0 : computedPercentage * 100;\n};\n\nconst computeCounterfactualConversions = (summaryObject, variations) => {\n  const fixedPercentage = 1 / variations;\n  let computedConversions = 0;\n  let x;\n  for (x = 0; x < variations; x++) {\n    computedConversions += (summaryObject.conversions[x] / summaryObject.visitors[x]) * (fixedPercentage * summaryObject.totalVisitors);\n  }\n  return Number.isNaN(computedConversions) ? 0 : parseInt(computedConversions);\n};\n\nexport const getConfidenceNumbers = (jsonFile) => {\n  const variations = jsonFile[0].trafficAllocation.length - 1;\n  const confidences = [\n    {\n      pValues: Array(variations).fill(1),\n      confidenceIntervals: Array(variations).fill([-Infinity, Infinity]),\n    }\n  ];\n\n  jsonFile.forEach((visitor) => {\n    confidences.push({\n      pValues: Object.values(visitor.stats).map((statObject) => statObject.pValue),\n      confidenceIntervals: Object.values(visitor.stats).map((statObject) => statObject.confInterval),\n    });\n  });\n\n  return confidences;\n};\n\nexport const getCounts = (jsonFile) => {\n  const variations = jsonFile[0].trafficAllocation.length;\n  const visitorCounts = [{\n    conversions: Array(variations).fill(0),\n    visitors: Array(variations).fill(0),\n    totalConversions: 0,\n    totalVisitors: 0,\n    counterfactualConversions: 0,\n    counterfactualRate: 0,\n    totalConversionRate: 0,\n  }];\n\n  jsonFile.forEach((visitor) => {\n    const summaryObject = _.cloneDeep(visitorCounts[visitorCounts.length - 1]); \n    summaryObject.visitors[visitor.variation] = summaryObject.visitors[visitor.variation] + 1;\n    summaryObject.totalVisitors = summaryObject.totalVisitors + 1;\n    if (visitor.convert) {\n      summaryObject.conversions[visitor.variation] = summaryObject.conversions[visitor.variation] + 1;\n      summaryObject.totalConversions = summaryObject.totalConversions + 1;\n    }\n    summaryObject.counterfactualRate = computeCounterfactualRate(summaryObject, variations);\n    summaryObject.counterfactualConversions = computeCounterfactualConversions(summaryObject, variations);\n    summaryObject.totalConversionRate = Number.isNaN(summaryObject.totalConversions / summaryObject.totalVisitors) ? 0 : (summaryObject.totalConversions / summaryObject.totalVisitors) * 100;\n    visitorCounts.push(summaryObject);\n  });\n\n  return visitorCounts;\n};\n\nexport const getDistributions = (jsonFile, sampleRate = 1) => {\n  const variations = Array(jsonFile[0].trafficAllocation.length).fill([]);\n  const initialPoints = roundDist(_.cloneDeep(jsonFile[0].trafficAllocation));\n  const distributions = [];\n  variations.forEach((variation, index) => {\n    distributions[index] = [initialPoints[index]];\n  });\n\n  jsonFile.forEach((visitor, visitorIndex) => {\n    const roundedDist = roundDist(visitor.trafficAllocation);\n    variations.forEach((variation, index) => {\n      if (!(visitorIndex % sampleRate)) {\n        distributions[index].push(roundedDist[index]);\n      }\n    });\n  });\n\n  return distributions;\n};\n\nexport default {\n  getConfidenceNumbers,\n  getCounts,\n  getDistributions,\n};\n","import _ from 'lodash';\nimport classNames from 'class-names';\nimport React, { Component } from 'react';\nimport './App.css';\nimport ReactHighcharts from 'react-highcharts';\nimport Slider from 'rc-slider';\nimport Icon from 'react-oui-icons';\n\nimport constants from './constants';\nimport fns from './fns';\n\nimport 'rc-slider/assets/index.css';\n\nclass DistributionChart extends Component {\n  getDistributionData = () => {\n    const {\n      counterfactualEnabled,\n      counts,\n      distributions,\n      position,\n      sampleRate,\n      variations,\n    } = this.props;\n\n    const series = [];\n    \n    Array(variations).fill(1).forEach((value, index) => {\n      series.push({\n        name: !!index ? `Variation ${index}` : 'Original',\n        data: distributions[index].slice(0, parseInt(position / sampleRate)),\n        animation: {\n          duration: 0,\n        },\n      })\n    });\n    \n    if (counterfactualEnabled) {\n      const conversionRateSeries = [];\n      const counterfactualRateSeries = [];\n      const totalConversions = [];\n      const counterfactualConversions = [];\n      let index = 0;\n      while (index <= position) {\n        conversionRateSeries.push(counts[index].totalConversionRate);\n        counterfactualRateSeries.push(counts[index].counterfactualRate);\n        totalConversions.push(counts[index].totalConversions);\n        counterfactualConversions.push(counts[index].counterfactualConversions);\n        index += sampleRate;\n      }\n\n      series.push({\n        animation: {\n          duration: 0,\n        },\n        color: 'blue',\n        data: totalConversions,\n        lineWidth: 2,\n        marker: {\n          enabled: false\n        },\n        name: 'Total Conversions',\n        tooltip: {\n          split: true,\n        },\n        type: 'spline',\n        yAxis: 1,\n      });\n\n      series.push({\n        animation: {\n          duration: 0,\n        },\n        color: 'blue',\n        dashStyle: 'shortdot',\n        data: counterfactualConversions,\n        lineWidth: 2,\n        marker: {\n          enabled: false\n        },\n        name: 'Counterfactual Conversions',\n        tooltip: {\n          split: true,\n        },\n        type: 'spline',\n        yAxis: 1,\n      });\n\n      series.push({\n        animation: {\n          duration: 0,\n        },\n        color: 'red',\n        dashStyle: 'solid',\n        data: conversionRateSeries,\n        lineWidth: 2,\n        marker: {\n          enabled: false\n        },\n        name: 'Total Conversion Rate',\n        tooltip: {\n          split: true,\n          valueDecimals: 2,\n          valueSuffix: '%',\n        },\n        type: 'spline',\n        yAxis: 2,\n      });\n\n      series.push({\n        animation: {\n          duration: 0,\n        },\n        color: 'red',\n        dashStyle: 'shortdot',\n        data: counterfactualRateSeries,\n        lineWidth: 2,\n        marker: {\n          enabled: false\n        },\n        name: 'Counterfactual Conversion Rate',\n        tooltip: {\n          split: true,\n          valueDecimals: 2,\n          valueSuffix: '%',\n        },\n        type: 'spline',\n        yAxis: 2,\n      });\n    }\n\n    return _.cloneDeep(series);\n  }\n\n  render() {\n    const {\n      chartRef,\n      counterfactualEnabled,\n      distributions,\n      policy,\n      sampleRate,\n    } = this.props;\n\n    let config = {\n      chart: {\n        type: counterfactualEnabled ? 'area' : 'line',\n      },\n      credits: {\n        enabled: false,\n      },\n      plotOptions: {\n        line: {\n          marker: {\n            enabled: false,\n          },\n        },\n      },\n      tooltip: {formatter: function () {\n        // The first returned item is the header, subsequent items are the\n        // points\n        return ['<b>' + this.x * sampleRate + ' visitors</b>'].concat(\n            this.points.map(function (point) {\n              let pointValue = point.y;\n              let suffix = '% of Traffic';\n              if (point.series.name.includes('Rate')) {\n                suffix = '%';\n              }\n              if (!point.series.name.includes('Conversions')) {\n                pointValue = Number(point.y).toFixed(2) + suffix;\n              }\n              return point.series.name + ': ' + pointValue;\n            })\n          );\n        },\n        split: true,\n        valueSuffix: '% of Traffic',\n      },\n      series: this.getDistributionData(),\n      title: {\n        text: constants.CHART_LABELS[policy],\n      },\n      xAxis: {\n        labels: {\n          formatter: function() {\n            return this.value * sampleRate;\n          }\n        },\n        min: 0,\n        max: parseInt(distributions[0].length),\n      },\n      yAxis: [\n        {\n          labels: {\n            formatter: function() {\n              return this.value + '%';\n            },\n          },\n          title: {\n            text: 'Distribution',\n          },\n        },\n      ],\n    }\n\n    if (counterfactualEnabled) {\n      config.plotOptions = {\n        area: {\n          lineWidth: 0,\n          marker: {\n            enabled: false\n          },\n          stacking: 'percent',\n        },\n      }\n\n      config.yAxis.push({\n        opposite: true,\n        title: {\n          style: {\n            color: 'blue',\n          },\n          text: 'Conversions',\n        },\n      })\n      config.yAxis.push({\n        opposite: true,\n        labels: {\n          formatter: function() {\n            return this.value + '%';\n          },\n        },\n        title: {\n          style: {\n            color: 'red',\n          },\n          text: 'Conversion Rate',\n        },\n      })\n    }\n\n    return (\n      <div className=\"flex--1\">\n        <ReactHighcharts\n          config={ config }\n          ref={ chartRef }\n        />\n      </div>\n    );\n  }\n}\n\nclass VariationCard extends Component {\n  render() {\n    const {\n      color,\n      conversionCount,\n      title,\n      visitorCount,\n    } = this.props;\n\n    return (\n      <div\n        className=\"flex flex--column flex-align--center soft--sides\">\n        <h5>\n          { title }\n        </h5>\n        <p className=\"micro muted\">\n          Conversions\n        </p>\n        <h3 className={ `${color}` }>\n          { conversionCount }\n        </h3>\n        <p className=\"micro muted\">\n          Visitors\n        </p>\n        <h3 className={ `${color}` }>\n          { visitorCount }\n        </h3>\n        <p className=\"micro muted\">\n          Conversion Rate\n        </p>\n        <h3 className={ `${color}` }>\n          { `${visitorCount ? ((conversionCount / visitorCount) * 100).toFixed(2) : '0.00'}%` }\n        </h3>\n      </div>\n    )\n  }\n}\n\nclass StatSigCard extends Component {\n  formatPValue = () => {\n    const { pValue } = this.props;\n\n    return `${ ((1 - pValue) * 100).toFixed(2) }%`;\n  }\n\n  render() {\n    const {\n      color,\n      pValue,\n      title,\n    } = this.props;\n\n    return (\n      <div className=\"flex flex--column flex-align--center soft--sides width--50\">\n        <h5>\n          { title }\n        </h5>\n        <h3 className={ classNames({\n          [color]: pValue <= 0.10\n        }) }>\n          { this.formatPValue() }\n        </h3>\n      </div>\n    );\n  }\n}\n\nclass SummaryCard extends Component {\n  getVisitorCount = (variation) => {\n    const {\n      counts,\n      position,\n    } = this.props;\n\n    return counts[position].visitors[variation];\n  }\n\n  getConversionCount = (variation) => {\n    const {\n      counts,\n      position,\n    } = this.props;\n\n    return counts[position].conversions[variation];\n  }\n\n  getPValue = (variation) => {\n    const {\n      confidences,\n      position,\n    } = this.props;\n\n    return confidences[position].pValues[variation];\n  }\n\n  isBetterThanBaseline = (variation) => {\n    const baselineConversionRate = this.getConversionCount(0) / this.getVisitorCount(0);\n    const variationConversionRate = this.getConversionCount(variation) / this.getVisitorCount(variation);\n    return Number.isNaN(baselineConversionRate) || Number.isNaN(variationConversionRate) ? false : variationConversionRate > baselineConversionRate;\n  };\n\n  renderVariationCards = () => {\n    const { variations } = this.props;\n\n    let conversionTotal = 0;\n    let visitorTotal = 0;\n\n    return Array(variations + 1).fill(1).map((value, index) => {\n      if (index < variations) {\n        conversionTotal += this.getConversionCount(index);\n        visitorTotal += this.getVisitorCount(index);\n      }\n      if (!index) {\n        return (\n          <VariationCard\n            color=\"black\"\n            conversionCount={ this.getConversionCount(0) }\n            key={ index }\n            title=\"Original\"\n            visitorCount={ this.getVisitorCount(0) }\n          />\n        );\n      } else if (index === variations) {\n        return (\n          <VariationCard\n            color=\"black\"\n            conversionCount={ conversionTotal }\n            key={ index }\n            title=\"Total\"\n            visitorCount={ visitorTotal }\n          />\n        );\n      } else {\n        return (\n          <VariationCard \n            color={ this.getPValue(index - 1) <= 0.10 ? this.isBetterThanBaseline(index) ? 'green' : 'red' : 'black' }\n            conversionCount={ this.getConversionCount(index) }\n            key={ index }\n            title={ `Variation ${index}` }\n            visitorCount={ this.getVisitorCount(index) }\n          />\n        );\n      }\n    });\n  };\n\n  renderStatSigCards = () => {\n    const { variations } = this.props;\n\n    return Array(variations - 1).fill(1).map((value, index) => {\n      return (\n        <StatSigCard\n          color={ this.isBetterThanBaseline(index + 1) ? 'green' : 'red' }\n          key={ index }\n          pValue={ this.getPValue(index) }\n          title={ `Variation ${index + 1}` }\n        />\n      )\n    });\n  };\n\n  render() {\n    const { hideGraphs, policy, variations } = this.props;\n    return (\n      <div\n        className={ classNames({\n          \"border--left\": !hideGraphs,\n          \"flex\": true,\n          \"flex-align--center\": true,\n          \"flex--column\": true,\n          \"soft\": hideGraphs,\n        }) }\n        style={ {\n          minWidth: `${125 * variations}px`,\n        } }\n      >\n        { hideGraphs && (\n          <h1>{ constants.CHART_LABELS[policy] }</h1>\n        ) }\n        <div className=\"flex flex--row flex--space width--100\">\n          { this.renderVariationCards() }\n        </div>\n        <h4 className=\"flex\">\n          Statistical Significance:\n        </h4>\n        <div className=\"flex flex--row flex--space width--100\">\n          { this.renderStatSigCards() }\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sampleRate = window.uniform.length / 500;\n    this.minRegretDistributions = fns.getDistributions(window.minRegret, this.sampleRate);\n    this.minTimeDistributions = fns.getDistributions(window.minTime, this.sampleRate);\n    this.uniformDistributions = fns.getDistributions(window.uniform, this.sampleRate);\n    this.minRegretCounts = fns.getCounts(window.minRegret);\n    this.minTimeCounts = fns.getCounts(window.minTime);\n    this.uniformCounts = fns.getCounts(window.uniform);\n    this.minRegretConfidences = fns.getConfidenceNumbers(window.minRegret);\n    this.minTimeConfidences = fns.getConfidenceNumbers(window.minTime);\n    this.uniformConfidences = fns.getConfidenceNumbers(window.uniform);\n    this.maxVisitors = Math.max(window.minRegret.length, window.minTime.length, window.uniform.length);\n    this.minRegretVariations = window.minRegret[0].trafficAllocation.length;\n    this.minTimeVariations = window.minTime[0].trafficAllocation.length;\n    this.uniformVariations = window.uniform[0].trafficAllocation.length;\n    this.chartRefs = {\n      minRegretRef: React.createRef(),\n      minTimeRef: React.createRef(),\n      uniformRef: React.createRef(),\n    }\n  }\n\n  state = {\n    counterfactualEnabled: false,\n    currentPosition: 0,\n    enabledCharts: [constants.MANUAL],\n    hideGraphs: false,\n    interval: null,\n    isRunning: false,\n    marks: {},\n    multiplier: 100,\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n    this.setTimelineMarks();\n  }\n\n  getNextSignificantPoint = () => {\n    const {\n      currentPosition,\n      marks,\n    } = this.state;\n    const significantPoints = Object.keys(marks).filter(mark => mark > currentPosition);\n    return significantPoints.length ? Number(significantPoints[0]) : currentPosition;\n  };\n\n  getPreviousSignificantPoint = () => {\n    const {\n      currentPosition,\n      marks,\n    } = this.state;\n    const significantPoints = Object.keys(marks).filter(mark => mark < currentPosition);\n    return significantPoints.length ? Number(significantPoints[significantPoints.length - 1]) : currentPosition;\n  }\n\n  toggleCounterfactual = () => {\n    this.setState((previousState) => {\n      return {\n        counterfactualEnabled: !previousState.counterfactualEnabled,\n      };\n    });\n  }\n\n  toggleSeries = (index) => {\n    Object.values(this.chartRefs).forEach((ref) => {\n      if (ref.current && ref.current.chart.series[index].visible) {\n        ref.current.chart.series[index].hide();\n      } else if (ref.current && !ref.current.chart.series[index].visible) {\n        ref.current.chart.series[index].show();\n      }\n    });\n  }\n\n  handleKeyDown = (event) => {\n    switch( event.keyCode ) {\n      case 32:\n        event.preventDefault();\n        if (this.state.isRunning) {\n          this.stopCounting();\n        } else {\n          this.startCounting();\n        }\n        break;\n      case 48:\n        this.toggleSeries(0);\n        break;\n      case 49:\n        this.toggleSeries(1);\n        break;\n      case 50:\n        this.toggleSeries(2);\n        break;\n      case 51:\n        this.toggleSeries(3);\n        break;\n      case 65:\n        this.toggleChart({ target: { value: constants.MANUAL } });\n        break;\n      case 67:\n        this.toggleCounterfactual();\n        break;\n      case 69:\n        this.stopCounting();\n        this.setCurrentPosition(this.maxVisitors);\n        break;\n      case 71:\n        this.toggleCharts();\n        break;\n      case 73:\n        this.toggleChart({ target: { value: constants.MIN_REGRET } });\n        break;\n      case 76:\n        this.toggleChart({ target: { value: constants.MIN_TIME } });\n        break;\n      case 78:\n        this.stopCounting();\n        this.setCurrentPosition(this.getNextSignificantPoint());\n        break;\n      case 80:\n        this.stopCounting();\n        this.setCurrentPosition(this.getPreviousSignificantPoint());\n        break;\n      case 82:\n        this.reset();\n        break;\n      default: \n        break;\n    }\n  };\n\n  isChartEnabled = (chartType) => {\n    return this.state.enabledCharts.includes(chartType);\n  };\n\n  reset = () => {\n    this.stopCounting();\n    this.setCurrentPosition(0);\n  }\n\n  setCurrentPosition = (position) => {\n    this.setState(() => {\n      return {\n        currentPosition: position\n      }\n    });\n  };\n\n  setTimelineMarks = () => {\n    const marks = {\n      0: {\n        style: {\n          color: 'grey',\n        },\n        label: 'Start',\n      },\n      20000: {\n        style: {\n          color: 'grey',\n        },\n        label: 'End'\n      }\n    }\n\n    if (this.isChartEnabled(constants.MANUAL)) {\n      marks['7900'] = {\n        style: {\n          color: 'red',\n        },\n        label: 'A/B Significant (Loser)',\n      };\n    }\n\n    if (this.isChartEnabled(constants.MIN_TIME)) {\n      marks['13200'] = {\n        style: {\n          color: 'green',\n        } ,\n        label: 'Min Time Significant (Winner)',\n      };\n\n      marks['4650'] = {\n        style: {\n          color: 'red',\n        },\n        label: 'Min Time Significant (Loser)',\n      };\n    };\n\n    this.setState(() => {\n      return {\n        marks,\n      };\n    });\n  };\n\n  startCounting = () => {\n    if (this.state.currentPosition >= this.maxVisitors) {\n      this.setState(() => {\n        return {\n          currentPosition: 0,\n        };\n      }, this.startInterval);\n    } else {\n      this.startInterval();\n    }\n    this.setState(() => {\n      return {\n        isRunning: true,\n      };\n    });\n  };\n\n  startInterval = () => {\n    this.setState(() => {\n      return {\n        interval: setInterval(() => {\n          if (this.state.currentPosition >= this.maxVisitors) {\n            this.stopCounting();\n            return;\n          }\n          this.setState((_previousState) => {\n            return {\n              currentPosition: _previousState.currentPosition + _previousState.multiplier >= this.maxVisitors ? this.maxVisitors : _previousState.currentPosition + _previousState.multiplier,\n            };\n          });\n        }, 100),\n      }\n    });\n  };\n\n  stopCounting = () => {\n    clearInterval(this.state.interval);\n    this.setState(() => {\n      return {\n        interval: null,\n        isRunning: false,\n      };\n    });\n  };\n\n  toggleChart = (event) => {\n    const chartType = event.target.value;\n\n    if (this.state.enabledCharts.includes(chartType)) {\n      const charts = _.cloneDeep(this.state.enabledCharts);\n      this.setState(() => {\n        return {\n          enabledCharts: charts.filter(type => type !== chartType),\n        };\n      }, this.setTimelineMarks);\n    } else {\n      this.setState((previousState) => {\n        const charts = _.cloneDeep(previousState.enabledCharts)\n        charts.push(chartType);\n        return {\n          enabledCharts: charts,\n        };\n      }, this.setTimelineMarks);\n    }\n  };\n\n  toggleCharts = (event) => {\n    this.setState((previousState) => {\n      return {\n        hideGraphs: !previousState.hideGraphs,\n      }\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"soft--sides\">\n        <div className=\"push--ends flex flex--row flex-align--center width--100\">\n          <div className={ classNames({\n            'push-double--right': true,\n            'flex': true,\n            'flex--column': true\n          }) }>\n            <div className=\"flex--row micro\">\n              <input\n                checked={ this.isChartEnabled(constants.MANUAL) }\n                id={ constants.MANUAL }\n                onChange={ this.toggleChart }\n                type=\"checkbox\"\n                value={ constants.MANUAL }\n              />\n              <label htmlFor={ constants.MANUAL }>\n                A/B\n              </label>\n            </div>\n            <div className=\"flex--row micro\">\n              <input\n                checked={ this.isChartEnabled(constants.MIN_REGRET) }\n                id={ constants.MIN_REGRET }\n                onChange={ this.toggleChart }\n                type=\"checkbox\"\n                value={ constants.MIN_REGRET }\n              />\n              <label htmlFor={ constants.MIN_REGRET }>\n                Min Regret\n              </label>\n            </div>\n            <div className=\"flex--row micro\">\n              <input\n                checked={ this.isChartEnabled(constants.MIN_TIME) }\n                id={ constants.MIN_TIME }\n                onChange={ this.toggleChart }\n                type=\"checkbox\"\n                value={ constants.MIN_TIME }\n              />\n              <label htmlFor={ constants.MIN_TIME }>\n                Min Time\n              </label>\n            </div>\n            <div className=\"flex--row micro\">\n              <input\n                checked={ this.state.hideGraphs }\n                id=\"charts\"\n                onChange={ this.toggleCharts }\n                type=\"checkbox\"\n              />\n              <label htmlFor=\"charts\">\n                Hide Graphs\n              </label>\n            </div>\n          </div>\n          <div className=\"push-double--right\">\n            { !this.state.interval && (\n              <button\n                className=\"no-padding\"\n                onClick={ this.startCounting }>\n                <div className=\"flex square--50 flex-align--center flex-justify--center\">\n                  { this.state.currentPosition !== this.maxVisitors && (\n                    <Icon\n                      name=\"play\"\n                      size=\"large\"\n                    />\n                  ) }\n                  { this.state.currentPosition === this.maxVisitors && (\n                    <Icon\n                      name=\"refresh\"\n                      size=\"large\"\n                    />\n                  ) }\n                </div>\n              </button>\n            ) }\n            { this.state.interval && (\n              <button\n                className=\"no-padding\"\n                onClick={ this.stopCounting }>\n                <div className=\"flex square--50 flex-align--center flex-justify--center\">\n                  <Icon\n                    name=\"pause\"\n                    size=\"large\"\n                  />\n                </div>\n              </button>\n            ) }\n          </div>\n          <div className=\"flex flex--1 flex-align--center push-double--right\">\n            <Slider\n              dots={ false }\n              min={ 0 }\n              marks={ this.state.marks }\n              max={ this.maxVisitors }\n              onChange={ this.setCurrentPosition }\n              value={ this.state.currentPosition }\n            />\n          </div>\n        </div>\n        <div className={ classNames({\n          'flex': this.state.hideGraphs,\n          'flex--row': this.state.hideGraphs,\n          'flex-justify--center': this.state.hideGraphs,\n          'flex--space': this.state.hideGraphs,\n        }) }>\n          { this.isChartEnabled(constants.MANUAL) && (\n            <div className=\"flex flex--row border push--ends\">\n              { !this.state.hideGraphs && (\n                <DistributionChart\n                  chartRef={ this.chartRefs.uniformRef }\n                  counterfactualEnabled={ this.state.counterfactualEnabled }\n                  counts={ this.uniformCounts }\n                  distributions={ this.uniformDistributions }\n                  policy={ constants.MANUAL }\n                  position={ this.state.currentPosition }\n                  sampleRate={ this.sampleRate }\n                  variations={ this.uniformVariations }\n                />\n              ) }\n              <SummaryCard\n                confidences={ this.uniformConfidences }\n                counts={ this.uniformCounts }\n                hideGraphs={ this.state.hideGraphs }\n                policy={ constants.MANUAL }\n                position={ this.state.currentPosition }\n                variations={ this.uniformVariations }\n              />\n            </div>\n          ) }\n          { this.isChartEnabled(constants.MIN_REGRET) && (\n            <div className=\"flex flex--row border push--ends\">\n              { !this.state.hideGraphs && (\n                <DistributionChart\n                  chartRef={ this.chartRefs.minRegretRef }\n                  counterfactualEnabled={ this.state.counterfactualEnabled }\n                  counts={ this.minRegretCounts }\n                  distributions={ this.minRegretDistributions }\n                  policy={ constants.MIN_REGRET }\n                  position={ this.state.currentPosition }\n                  sampleRate={ this.sampleRate }\n                  variations={ this.minRegretVariations }\n                />\n              ) }\n              <SummaryCard\n                confidences={ this.minRegretConfidences }\n                counts={ this.minRegretCounts }\n                hideGraphs={ this.state.hideGraphs }\n                policy={ constants.MIN_REGRET }\n                position={ this.state.currentPosition }\n                variations={ this.minRegretVariations }\n              />\n            </div>\n          ) }\n          { this.isChartEnabled(constants.MIN_TIME) && (\n            <div className=\"flex flex--row border push--ends\">\n              { !this.state.hideGraphs && (\n                <DistributionChart\n                  chartRef={ this.chartRefs.minTimeRef }\n                  counterfactualEnabled={ this.state.counterfactualEnabled }\n                  counts={ this.minTimeCounts }\n                  distributions={ this.minTimeDistributions }\n                  policy={ constants.MIN_TIME }\n                  position={ this.state.currentPosition }\n                  sampleRate={ this.sampleRate }\n                  variations={ this.minTimeVariations }\n                />\n              ) }\n              <SummaryCard\n                confidences={ this.minTimeConfidences }\n                counts={ this.minTimeCounts }\n                hideGraphs={ this.state.hideGraphs }\n                policy={ constants.MIN_TIME }\n                position={ this.state.currentPosition }\n                variations={ this.minTimeVariations }\n              />\n            </div>\n          ) }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}